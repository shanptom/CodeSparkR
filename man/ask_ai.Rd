% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ask_ai.R
\name{ask_ai}
\alias{ask_ai}
\title{Ask AI Model with Multiple Context Files}
\usage{
ask_ai(
  prompt,
  model = NULL,
  context_files = NULL,
  save_to_file = FALSE,
  filename = NULL,
  format_output = TRUE,
  return_cleaned = TRUE,
  custom_timeout = NULL,
  open_file = FALSE
)
}
\arguments{
\item{prompt}{Character. The prompt or instruction for the model.}

\item{model}{Optional character. The model name (e.g., \code{"google/gemini-2.0-pro"}). Prompts interactively if NULL.
A complete list of available models can be found at: https://openrouter.ai/models}

\item{context_files}{Optional character vector. File paths to one or more context files.}

\item{save_to_file}{Logical. If TRUE, saves the output to a .Rmd file. Default is FALSE.}

\item{filename}{Optional character. Filename to save the output if \code{save_to_file = TRUE}.}

\item{format_output}{Logical. Whether to clean and print the response to console. Default is TRUE.}

\item{return_cleaned}{Logical. If TRUE, returns cleaned text. If FALSE, returns raw output. Default is TRUE.}

\item{custom_timeout}{Optional numeric. Timeout in seconds. Auto-computed if NULL.}

\item{open_file}{Logical. Whether to open the Rmd file after saving (interactive mode only). Default is FALSE.}
}
\value{
Invisibly returns the model response as a character string (cleaned or raw based on \code{return_cleaned}).
}
\description{
Sends a prompt to a AI model using the OpenRouter API, with support for multiple context files and advanced options.
}
\examples{
# Example using all options
\dontrun{
# Create dummy context files for the example
writeLines("This is the content of file1.", "file1.txt")
writeLines("This is the content of file2.", "file2.md")

# Use ask_ai with all parameters
response <- ask_ai(
  prompt = "Summarize the content of the provided files.",
  model = "google/gemini-2.0-flash", # Replace with a valid model if needed
  context_files = c("file1.txt", "file2.md"),
  save_to_file = TRUE,
  filename = "summary_response.Rmd",
  format_output = TRUE,
  return_cleaned = TRUE,
  custom_timeout = 180,
  open_file = FALSE # Set to TRUE to open the file after saving
)

# Print the cleaned response
print(response)

# Clean up dummy files
unlink(c("file1.txt", "file2.md", "summary_response.Rmd"))
}

}
